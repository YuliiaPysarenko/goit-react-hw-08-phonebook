{"version":3,"file":"static/js/619.b3b43331.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"sourcesContent":["import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { contactsOperations } from '../../redux/contacts';\nimport { Form, Button } from 'react-bootstrap';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'username':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n\n      <Form.Group className=\"mb-3\">\n        <Form.Label htmlFor={nameInputId}>Name</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"username\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          id={nameInputId}\n          onChange={handleChange}\n          required\n        />\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\">\n        <Form.Label htmlFor={numberInputId}>Number</Form.Label>\n        <Form.Control\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={numberInputId}\n          onChange={handleChange}\n          required\n        />\n      </Form.Group>\n\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmit: data => {\n      dispatch(contactsOperations.addContact(data))\n    },\n  }\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport PropTypes from 'prop-types';\nimport { Button} from 'react-bootstrap';\n\nconst ContactItem = ({contact}) => {\n    const {id, name, number} = contact;\n    const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n    const dispatch = useDispatch(); \n    const deleteContact = id => {\n        dispatch(contactsOperations.deleteContact(id))};\n    \n    return (\n        <tr key={id}>\n            <td>{name}</td>\n            <td>{number}</td>\n            <td>\n                <Button onClick={() => deleteContact(id)} disabled={isLoadingContacts}>\n                    Delete\n              </Button>\n            </td>\n        </tr>\n    )\n}\n\nContactItem.propTypes = {\n    name: PropTypes.string, \n    number: PropTypes.string,\n    id: PropTypes.string,\n}\n\n\nexport default ContactItem;","import { useSelector } from 'react-redux';\nimport { contactsSelectors } from '../../redux/contacts';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { FallingLines } from 'react-loader-spinner';\nimport { Table} from 'react-bootstrap';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n\n  return (\n    <>\n      {contacts ?\n        <Table hover>\n          <thead>\n            <tr>\n              <th style={{width:'40%'}}>Name</th>\n              <th style={{width:'40%'}}>Phone Number</th>\n              <th style={{width:'20%'}}></th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map(contact => (\n              <ContactItem contact={contact} key={contact.id} />\n            ))}\n          </tbody>\n        </Table> : null}\n      {isLoadingContacts && (\n      <div style={{textAlign: 'center'}}><FallingLines width=\"110\" color=\"#0d6efd\" /></div>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { nanoid } from \"nanoid\";\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts';\nimport { Form } from 'react-bootstrap';\n\nconst filterinputId = nanoid();\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const handleChange = e => {\n      const value = e.target.value;\n      dispatch(changeFilter(value));\n    };\n\n    return (\n        <Form.Group className=\"mb-3\">\n            <Form.Label htmlFor={filterinputId}>Find by Name</Form.Label>\n            <Form.Control \n                type=\"text\"\n                name=\"filter\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                id={filterinputId}\n                onChange={handleChange}\n                required />\n        </Form.Group>\n    )\n}\n\nexport default Filter;","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { contactsOperations, contactsSelectors } from '../redux/contacts';\n\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts())\n  }, [dispatch]);\n\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n\n  const formSubmitHandler = async data => {\n    const existedContact = contacts.find(\n      contact => contact.name.toLowerCase() === data.name.toLowerCase()\n    );\n\n    if (!existedContact) {\n      contactsOperations.addContact(data);\n      toast.success('Contact is successfully added.');\n    } else {\n      toast.error(`User ${data.name} already exists`);\n    }\n  };\n\n  return (\n    <>\n      <Container className=\"pt-5\">\n        <Row className=\"mx-auto mt-5 justify-content-md-center\">\n          <Col xs=\"auto\" md={8} xl={7} className=\"p-3\">\n            <h2>Contacts</h2>\n            <Filter />\n            <Toaster position=\"top-right\" reverseOrder={false} />\n            <ContactList />\n          </Col>\n\n          <Card as={Col} xs=\"auto\" sm={6} md={4} lg={3} bg=\"light\" className=\"p-3\">\n            <h2>Phonebook</h2>\n            <ContactForm onSubmit={formSubmitHandler} />\n          </Card>\n        </Row>\n      </Container>\n    </>\n  );\n}\n"],"names":["connect","dispatch","onSubmit","data","contactsOperations","useState","name","setName","number","setNumber","nameInputId","nanoid","numberInputId","handleChange","e","target","value","Form","preventDefault","className","htmlFor","type","pattern","title","id","onChange","required","Button","contact","isLoadingContacts","useSelector","contactsSelectors","useDispatch","onClick","deleteContact","disabled","contacts","Table","hover","style","width","map","textAlign","color","filterinputId","changeFilter","ContactsView","useEffect","formSubmitHandler","find","toLowerCase","toast","Container","Row","Col","xs","md","xl","position","reverseOrder","Card","as","sm","lg","bg"],"sourceRoot":""}